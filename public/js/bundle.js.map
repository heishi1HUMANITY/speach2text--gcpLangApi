{"version":3,"sources":["webpack://workspace/./src/recog.ts","webpack://workspace/./src/main.ts"],"names":["recognition","webkitSpeechRecognition","lang","continuous","maxAlternatives","document","querySelector","container","recognitionStatus","results","addEventListener","e","push","resultIndex","transcript","innerHTML","forEach","v","p","createElement","innerText","appendChild","body","join","uri","encodeURI","response","fetch","then","res","json","console","log","result","text","content","replace","sentiment","score","setAttribute","err","stop","start"],"mappings":"mBAIO,MAAMA,EAAiC,IAAIC,wBAClDD,EAAYE,KAAO,QACnBF,EAAYG,YAAa,EACzBH,EAAYI,gBAAkB,ECH9B,MAAM,EAA4BC,SAASC,cAAc,UACnDC,EAA4BF,SAASC,cAAc,cAEzD,IAAIE,GAA6B,EAC7BC,EAAoB,GAExBT,EAAYU,iBAAiB,UAAWC,IACtCF,EAAQG,KAAKD,EAAEF,QAAQE,EAAEE,aAAa,GAAGC,YACzCP,EAAUQ,UAAY,GACtBN,EAAQO,SAASC,IACf,MAAMC,EAAIb,SAASc,cAAc,KACjCD,EAAEE,UAAYH,EAAI,IAClBV,EAAUc,YAAYH,SAI1BlB,EAAYU,iBAAiB,OAAcC,IAA4B,O,OAAD,E,OAAA,E,EAAA,YACpE,MAAMW,EAAeb,EAAQc,KAAK,KAClCd,EAAU,GACV,MAAMe,EAAcC,UAAU,+CAA+CH,KAC7E,IACE,MAAMI,QAAkCC,MAAMH,GAAKI,MAAMC,GAAkBA,EAAIC,SAC/EC,QAAQC,IAAIN,GACZnB,EAAUQ,UAAY,GACtBW,EAASO,OAAOjB,SAASC,IACvB,MAAMC,EAAIb,SAASc,cAAc,KACjCD,EAAEE,UAAYH,EAAEiB,KAAKC,QAAQC,QAAQ,IAAK,IAAM,IAC7CnB,EAAEoB,UAAUC,QAAU,IACvBpB,EAAEqB,aAAa,QAAS,eACjBtB,EAAEoB,UAAUC,OAAS,KAC5BpB,EAAEqB,aAAa,QAAS,iBAE1BhC,EAAUc,YAAYH,MAExB,MAAOsB,GACPT,QAAQC,IAAIQ,K,YAnBsD,K,iRAuBtE,EAAO9B,iBAAiB,SAAS,MACL,IAAtBF,GACFR,EAAYyC,OACZjC,GAAoB,EACpB,EAAOY,UAAY,UAEnBpB,EAAY0C,QACZlC,GAAoB,EACpB,EAAOY,UAAY,OACnBb,EAAUQ,UAAY,Q","file":"bundle.js","sourcesContent":["'use strict';\n\ndeclare const webkitSpeechRecognition: typeof SpeechRecognition;\n\nexport const recognition: SpeechRecognition = new webkitSpeechRecognition();\nrecognition.lang = 'ja-JP';\nrecognition.continuous = true;\nrecognition.maxAlternatives = 1;\n","'use strict';\n\nimport { recognition } from './recog';\n\nconst button: HTMLButtonElement = document.querySelector('#recog');\nconst container: HTMLDivElement = document.querySelector('#container');\n\nlet recognitionStatus: Boolean = false;\nlet results: string[] = [];\n\nrecognition.addEventListener('result', (e: SpeechRecognitionEvent): void => {\n  results.push(e.results[e.resultIndex][0].transcript);\n  container.innerHTML = '';\n  results.forEach((v: string): void => {\n    const p = document.createElement('p');\n    p.innerText = v + '。';\n    container.appendChild(p);\n  });\n});\n\nrecognition.addEventListener('end', async (e: Event): Promise<void> => {\n  const body: string = results.join('。');\n  results = [];\n  const uri: string = encodeURI(`http://localhost:8080/api/v1/sentiment?text=${body}`);\n  try {\n    const response: {result: any[]} = await fetch(uri).then((res: Response) => res.json());\n    console.log(response)\n    container.innerHTML = '';\n    response.result.forEach((v: any): void => {\n      const p = document.createElement('p');\n      p.innerText = v.text.content.replace('。', '') + '。'\n      if(v.sentiment.score <= -0.25) {\n        p.setAttribute('style', 'color: red;');\n      }else if(v.sentiment.score >= 0.25) {\n        p.setAttribute('style', 'color: green;');\n      }\n      container.appendChild(p);\n    });\n  } catch (err) {\n    console.log(err);\n  }\n});\n\nbutton.addEventListener('click', (): void => {\n  if (recognitionStatus === true) {\n    recognition.stop();\n    recognitionStatus = false;\n    button.innerText = 'start'\n  } else {\n    recognition.start();\n    recognitionStatus = true;\n    button.innerText = 'stop';\n    container.innerHTML = '';\n  }\n});\n"],"sourceRoot":""}